Public URL: https://9cb2-4-155-102-23.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [30/May/2025 15:36:41] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:36:42] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [30/May/2025 15:36:49] "POST /upload_url HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:37:18] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:37:36] "POST /data HTTP/1.1" 200 -
📂 New session folder created: guest_053020251536
This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump's imposed and threatened tariffs on imports have pounded consumers' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they're increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden's presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden's approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he'll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they're not what most Americans are focusing on. Instead, they're preparing for price and supply shocks that are likely to begin in a few months as Trump's import tariffs careen through the economy. Read more: The latest news and updates on Trump's tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they'll distort markets and change the whole flow of products. Trump's tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren't even docking because importers can't or won't pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump's tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven't pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That's the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.

1 documents prepared for vectorization
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'average tax on $3 trillion', 'result': 'The text mentions that Trump has raised the average tax on $3 trillion worth of imports from a low of 2.5% when he took office to a hefty 27%.'}
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'what is chainsaw motif', 'result': 'I don\'t have enough information to provide a specific definition of a "chainsaw motif." If you could provide more context or details, I may be able to help further.'}
127.0.0.1 - - [30/May/2025 15:38:34] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:38:42] "POST /data HTTP/1.1" 200 -
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'whose chainsaw motif', 'result': "I don't have information about a chainsaw motif in the context provided."}
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'air travel and computer chips', 'result': 'Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips.'}
127.0.0.1 - - [30/May/2025 15:40:03] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:41:03] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:41:08] "POST /data HTTP/1.1" 200 -
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': "Are Trump's tariffs in danger of being implemented?", 'result': "Based on the information provided, Trump's tariffs have already been implemented, with tariffs on imports from various countries being raised significantly. Americans are bracing for soaring prices, product shortages, and other negative impacts as a result of these tariffs."}
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
127.0.0.1 - - [30/May/2025 15:41:52] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:41:54] "POST /upload_pdf HTTP/1.1" 200 -
This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump's imposed and threatened tariffs on imports have pounded consumers' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they're increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden's presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden's approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he'll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they're not what most Americans are focusing on. Instead, they're preparing for price and supply shocks that are likely to begin in a few months as Trump's import tariffs careen through the economy. Read more: The latest news and updates on Trump's tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they'll distort markets and change the whole flow of products. Trump's tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren't even docking because importers can't or won't pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump's tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven't pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That's the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.

1 documents prepared for vectorization
["Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video.", 'Runnable interface: The base abstraction that many LangChain components and the LangChain Expression Language are built on.  Streaming: LangChain streaming APIs for surfacing results as they are generated.  LangChain Expression Language LCEL: A syntax for orchestrating LangChain components. Most useful for simpler applications.  Document loaders: Load a source as a list of documents.  Retrieval: Information retrieval systems can retrieve structured or unstructured data from a datasource in response to a query.  Text splitters: Split long text into smaller chunks that can be individually indexed to enable granular retrieval.  Embedding models: Models that represent data such as text or images in a vector space.  Vector stores: Storage of and efficient search over vectors and associated metadata.  Retriever: A component that returns relevant documents from a knowledge base in response to a query.  Retrieval Augmented Generation RAG: A technique that enhances language models by combining them with external knowledge bases.  Agents: Use a language model to choose a sequence of actions to take. Agents can interact with external resources via tool.  Prompt templates: Component for factoring out the static parts of a model "prompt" usually a sequence of messages. Useful for serializing, versioning, and reusing these static parts.  Output parsers: Responsible for taking the output of a model and transforming it into a more suitable format for downstream tasks. Output parsers were primarily useful prior to the general availability of tool calling and structured outputs.  Few-shot prompting: A technique for improving model performance by providing a few examples of the task to perform in the prompt.  Example selectors: Used to select the most relevant examples from a dataset based on a given input. Example selectors are used in few-shot prompting to select examples for a prompt.', "Callbacks: Callbacks enable the execution of custom auxiliary code in built-in components. Callbacks are used to stream outputs from LLMs in LangChain, trace the intermediate steps of an application, and more.  Tracing: The process of recording the steps that an application takes to go from input to output. Tracing is essential for debugging and diagnosing issues in complex applications.  Evaluation: The process of assessing the performance and effectiveness of AI applications. This involves testing the model's responses against a set of predefined criteria or benchmarks to ensure it meets the desired quality standards and fulfills the intended purpose. This process is vital for building reliable applications. Glossary  AIMessageChunk: A partial response from an AI message. Used when streaming responses from a chat model.  AIMessage: Represents a complete response from an AI model.  StructuredTool: The base class for all tools in LangChain.  batch: Use to execute a runnable with batch inputs a Runnable.  bindTools: Allows models to interact with tools.  Caching: Storing results to avoid redundant calls to a chat model.  Context window: The maximum size of input a chat model can process.  Conversation patterns: Common patterns in chat interactions.  Document: LangChain's representation of a document.  Embedding models: Models that generate vector embeddings for various data types.  HumanMessage: Represents a message from a human user.  input and output types: Types used for input and output in Runnables.  Integration packages: Third-party packages that integrate with LangChain.  invoke: A standard method to invoke a Runnable.  JSON mode: Returning responses in JSON format.  langchaincommunity: Community-driven components for LangChain.", "langchaincore: Core langchain package. Includes base interfaces and in-memory implementations.  langchain: A package for higher level components e.g., some pre-built chains.  langchainlanggraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows.  Managing chat history: Techniques to maintain and manage the chat history.  OpenAI format: OpenAI's message format for chat models.  Propagation of RunnableConfig: Propagating configuration through Runnables.  RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph.  role: Represents the role e.g., user, assistant of a chat message.  RunnableConfig: Use to pass run time information to Runnables e.g., runName, runId, tags, metadata, maxConcurrency, recursionLimit, configurable.  Standard parameters for chat models: Parameters such as API key, temperature, and maxTokens,  stream: Use to stream output from a Runnable or a graph.  Tokenization: The process of converting data into tokens and vice versa.  Tokens: The basic unit that a language model reads, processes, and generates under the hood.  Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing.  Tool binding: Binding tools to models.  tool: Function for creating tools in LangChain.  Toolkits: A collection of tools that can be used together.  ToolMessage: Represents a message that contains the results of a tool execution.  Vector stores: Datastores specialized for storing and efficiently searching vector embeddings.", 'withStructuredOutput: A helper method for chat models that natively support tool calling to get structured output matching a given schema specified via Zod, JSON schema or a function.']
127.0.0.1 - - [30/May/2025 15:42:17] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:42:30] "POST /data HTTP/1.1" 200 -
Yahoo r en del av varum rkesfamiljen Yahoo. Yahoo r en del av varum rkesfamiljen Yahoo. N r du anv nder v ra webbplatser och appar anv nder vi cookies f r att: tillhandah lla v ra webbplatser och appar till dig autentisera anv ndare, till mpa s kerhets tg rder och f rhindra skr ppost och missbruk och m ta din anv ndning av v ra webbplatser och appar Om du klickar p Godk nn alla kommer vi och v ra partner, inklusive 241 som ing r i IAB Transparency and Consent Framework, ocks att lagra och/eller komma t information p en enhet (anv nda cookies, med andra ord) och anv nda exakta geolokaliseringsuppgifter samt andra personuppgifter, till exempel IP-adress och surf- och s kdata, f r analys, anpassad annonsering och anpassat inneh ll, m tning av annonsering och inneh ll samt utveckling av m lgruppsunders kningar och -tj nster. Klicka p Avvisa alla om du inte vill att vi och v ra partner ska anv nda cookies och personuppgifter f r dessa ytterligare ndam l. Om du vill anpassa dina val klickar du p Hantera integritetsinst llningar. Du kan n r som helst terkalla ditt samtycke eller ndra dina val genom att klicka p l nkarna Inst llningar f r integritet och cookies eller Integritetspanel p v ra webbplatser och i v ra appar. F mer information om hur vi anv nder dina personuppgifter i v r integritetspolicy och cookiepolicy.

6 documents prepared for vectorization
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': "Are Trump's tariffs in danger of being implemented?", 'result': "Based on the context provided, President Trump's tariffs have already been implemented on imports, particularly targeting Chinese goods. These tariffs have already impacted consumer attitudes about the economy, leading to concerns about soaring prices, product shortages, and other negative outcomes. The tariffs are affecting the flow of products and are expected to result in shortages of various goods by summer or fall, along with higher prices for products that pass through or avoid the tariff measures. So, the tariffs are not in danger of being implemented; they are currently affecting the economy according to the information available."}
[Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html', 'type': 'url'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.'), Document(id='809dcf57-749b-4248-b560-5935c6a0f3ad', metadata={'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html', 'type': 'url'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'air travel and computer chips', 'result': 'Both air travel and computer chips are mentioned in the context you provided in relation to tariffs and the impact on the economy. The statement highlights that tariffs are an arcane throwback to old-timey economies that predate advancements such as air travel and computer chips. This implies that tariffs are seen as outdated economic measures compared to the modern advancements like air travel and computer technology.'}
127.0.0.1 - - [30/May/2025 15:42:45] "POST /data HTTP/1.1" 200 -
[Document(id='d053e05a-2cb9-429d-bd58-f1de3ecf0d19', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='Yahoo r en del av varum rkesfamiljen Yahoo. Yahoo r en del av varum rkesfamiljen Yahoo. N r du anv nder v ra webbplatser och appar anv nder vi cookies f r att: tillhandah lla v ra webbplatser och appar till dig autentisera anv ndare, till mpa s kerhets tg rder och f rhindra skr ppost och missbruk och m ta din anv ndning av v ra webbplatser och appar Om du klickar p Godk nn alla kommer vi och v ra partner, inklusive 241 som ing r i IAB Transparency and Consent Framework, ocks att lagra och/eller komma t information p en enhet (anv nda cookies, med andra ord) och anv nda exakta geolokaliseringsuppgifter samt andra personuppgifter, till exempel IP-adress och surf- och s kdata, f r analys, anpassad annonsering och anpassat inneh ll, m tning av annonsering och inneh ll samt utveckling av m lgruppsunders kningar och -tj nster. Klicka p Avvisa alla om du inte vill att vi och v ra partner ska anv nda cookies och personuppgifter f r dessa ytterligare ndam l. Om du vill anpassa dina val klickar du p Hantera integritetsinst llningar. Du kan n r som helst terkalla ditt samtycke eller ndra dina val genom att klicka p l nkarna Inst llningar f r integritet och cookies eller Integritetspanel p v ra webbplatser och i v ra appar. F mer information om hur vi anv nder dina personuppgifter i v r integritetspolicy och cookiepolicy.'), Document(id='6763e608-71e6-43e3-ac4f-463a976e8f53', metadata={'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html', 'type': 'url'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': 'Explain Langchain', 'result': 'LangChain is a framework that provides a set of tools and components for building AI applications, specifically focused on chat models. It includes packages such as langchaincore, which has base interfaces and in-memory implementations, as well as higher-level components in the langchain package. LangChain also offers langchainlanggraph, an orchestration layer for building complex pipelines and workflows.\n\nSome key concepts within LangChain include chat models, chat history, tools, structured output, memory, multimodality, and runnable configurations. Chat models are large language models exposed via a chat API that process sequences of messages, while chat history represents a conversation as a sequence of messages. Tools are functions with associated schemas for defining their name, description, and arguments.\n\nLangChain also supports features like tool binding, toolkits, and vector stores for efficient searching and storing of vector embeddings. The framework emphasizes the management of conversation history, propagation of configurations, and the use of standard parameters for chat models. Overall, LangChain aims to simplify the development of AI applications, particularly those involving natural language processing and chatbot functionalities.'}
127.0.0.1 - - [30/May/2025 15:42:59] "POST /data HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [30/May/2025 15:44:31] "POST /transcribe HTTP/1.1" 200 -
127.0.0.1 - - [30/May/2025 15:44:39] "POST /plain_english HTTP/1.1" 200 -
[Document(id='95c220ff-be8e-45b6-9b33-09d8df2aa84a', metadata={'source': './KB/PDF/guest_053020251536/Langchain Conceptual guide.pdf', 'page': 1, 'type': 'pdf'}, page_content="Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video."), Document(id='23089a59-abb9-484c-b69c-50bb8e4204c4', metadata={'page': 1, 'source': './KB/PDF/guest_053020251536/Langchain Conceptual guide.pdf', 'type': 'pdf'}, page_content="langchaincore: Core langchain package. Includes base interfaces and in-memory implementations.  langchain: A package for higher level components e.g., some pre-built chains.  langchainlanggraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows.  Managing chat history: Techniques to maintain and manage the chat history.  OpenAI format: OpenAI's message format for chat models.  Propagation of RunnableConfig: Propagating configuration through Runnables.  RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph.  role: Represents the role e.g., user, assistant of a chat message.  RunnableConfig: Use to pass run time information to Runnables e.g., runName, runId, tags, metadata, maxConcurrency, recursionLimit, configurable.  Standard parameters for chat models: Parameters such as API key, temperature, and maxTokens,  stream: Use to stream output from a Runnable or a graph.  Tokenization: The process of converting data into tokens and vice versa.  Tokens: The basic unit that a language model reads, processes, and generates under the hood.  Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing.  Tool binding: Binding tools to models.  tool: Function for creating tools in LangChain.  Toolkits: A collection of tools that can be used together.  ToolMessage: Represents a message that contains the results of a tool execution.  Vector stores: Datastores specialized for storing and efficiently searching vector embeddings.")]
Using latest vector DB: ./vector_dbs/guest_053020251536
{'query': "Why are Trump's tariffs considered harmful or risky?", 'result': "Trump's tariffs are considered harmful or risky for several reasons:\n\n1. **Impact on prices**: The imposed tariffs on imports are expected to lead to soaring prices for consumers. High tariffs can increase the cost of imported goods, leading to higher prices for everyday products like clothing, electronics, and pharmaceuticals. This can result in financial strain on consumers who need these products.\n\n2. **Product shortages**: The high tariffs on some imports, especially from countries like China, can distort markets and disrupt the flow of products. Cargo ships may avoid docking due to the prohibitive tariffs, leading to shortages of essential goods like food, clothing, and electronics. This scarcity can further drive up prices and limit consumer choices.\n\n3. **Inflation**: The tariffs are expected to contribute to higher inflation rates. Consumers are bracing for inflation rates as high as 6.5%, significantly higher than what was experienced during Biden's presidency. Inflation erodes the purchasing power of consumers, making goods and services more expensive and potentially reducing overall economic stability.\n\n4. **Potential economic impact**: By raising the average tax on billions of dollars worth of imports, Trump's tariffs could result in a significant tax burden on American businesses and consumers. If businesses pass these costs on to consumers in the form of higher prices, it could lead to reduced consumer spending, economic uncertainty, and potential negative impacts on the overall economy.\n\nIn summary, Trump's tariffs are considered harmful or risky because they have the potential to increase prices, cause product shortages, fuel inflation, and negatively impact the economy and consumer sentiment."}
127.0.0.1 - - [30/May/2025 15:44:46] "POST /data HTTP/1.1" 200 -
Public URL: https://acc9-4-155-102-23.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [31/May/2025 05:29:20] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 05:29:22] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [31/May/2025 05:29:55] "POST /upload_pdf HTTP/1.1" 200 -
📂 New session folder created: guest_053120250529
['Running a Bash script redhat-developer rhdevelopers developers.redhat.com Using a shebang header There are two ways to run a Bash script. The first way is to execute it as a parameter of a direct call to the bash executable binary, like so:  bash myscript Hello from Bash WHERE the content of the file myscript is as follows: echo "Hello from Bash" myscript The second way to use the chmod command to change the permissions of the bash script to make it a standalone executable, like so:  chmod x .myscript  .myscript chmod bash Bash commands Cheat sheet A Bash script is a text file that contains programming statements that execute commands that are part of the host computers operating system. Typically system administrators and programmers use Bash scripts to avoid having to repetitively execute tasks manually in a terminal. A typical use case for a Bash script is to do set up tasks for a newly provisioned computer. Thus, in addition to being a tool for system administrators and programmers, a Bash script can also be used by system provisioning software. The  symbol that proceeds commands in the examples represents the command line prompt. Unlike a binary executable file which knows how to interact with the computers operating system directly, a Bash script, which is always text based, requires another program to run its commands. This other program is called an interpreter. The interpreter that runs a Bash script is, as the name implies, bash. However, in other cases, a bash script can be run by another interpreter thats installed on the host computer. An example of another interpreter is sh . The way a Bash script lets the operating system know which interpreter to use is according to a declaration made at the first line of the script. This first line declaration is called a script header. It is also called a shebang. A shebang starts with the characters ! An example of a shebang is as follows: bash sh !', '!usrbinbash redhat-developer rhdevelopers developers.redhat.com The shebang shown above tells the operating system to use the interpreter located at the filepath usrbinbash to execute the lines of code that will follow in the script. Another form of a shebang is as follows: !usrenv bash usrbinbash The shebang !usrenv bash tells the operating system to search the computers PATH to find the bash interpreter. Thus, any instance of bash can be used as long as the its in a location defined by the PATH environment variable. PATH PATH bash bash As mentioned above, a host operating system has to have the capability to run scripts for other interpreted programming languages as long as the given interpreter is installed on the host computer and the shebang has been configured properly. The example below shows a Perl script file. Notice that the script header a.k.a. shebang declares the file as a Perl script: Executing scripts in another language !usrbinperl use strict; use warnings; print "Hello World from Perln"; Variables Using variables is a critical factor for programming Bash scripts. The following sections describe various aspects of working with variables under Bash. You declare a variable in a bash script like so VARIABLENAMEvalue WHERE value is the value assigned to the variable. Then, to reference the variable, put the  symbol before the variable name being referenced, like so: VARIABLENAME. VARIABLENAMEvalue value  VARIABLENAME Variable declaration Example: !usrbinenv bash MSG"Hello World" echo "MSG "  Hello World', 'BE CAREFUL to make sure there is no space on either side of the  symbol when declaring a variable. The following will not work: MYVARIABLE  foo.  MYVARIABLE  foo redhat-developer rhdevelopers developers.redhat.com And the statement MSG,, turns all uppercase characters in the variable MSG to lowercase, like so: MSG,, MSG MSG"aBcDeFg" echo MSG,, returns abcdef Parameter expansion a technique to get the value from the referenced entity such as a variable in a Linux script or an environment variable according to a piece of processing logic. A variable is processed by enclosing the variable name within the   characters. The processing logic is defined by characters that follow the variable name. For example the variable named MSG, the statement MSG turns all lowercase characters in the variable MSG to uppercase, like so: String manipulation using parameter expansion   MSG MSG MSG MSG"aBcDeFg" echo MSG returns ABCDEFG Examples: The following examples demonstrate various ways to use parameter expansion on Linux variables. Word replacement MSG"Say hi to Chris and Sidney" echo MSGChrisBilly returns Say hi to Billy and Sidney Character replacement using regular expressions MSG"I need 10" echo MSGa-zA-ZX returns X XXXX 10 Replace all alphabetic characters with the character X but leave the numerals alone X', 'MSG"I need 10" echo MSG0-9Z returns I need ZZ Replace all numeric characters with the character Z but leave alphabetic characters alone Z redhat-developer rhdevelopers developers.redhat.com Extracting substrings MSG"The Rolling Stones" echo MSG:4 returns Rolling Stones Use the : symbol to get the substring of all the characters after the starting at position 4 : Case conversion MSG"aBcDeFg" echo MSG returns ABcDeFg Use the  symbol to convert the first character in a string to uppercase.  Use the : symbol to get the substring that has 7 characters starting at position 4 : MSG"The Rolling Stones" echo MSG:4:7 returns Rolling Use the  symbol to get the substring after the characters The starting from the left side of the string  The MSG"The Rolling Stones" echo MSGThe returns Rolling Stones Use the  symbol to get the substring before the characters Rolling Stones starting the right side of the string  Rolling Stones MSG"The Rolling Stones" echo MSGRolling Stones returns The', 'MSG"aBcDeFg" echo MSG returns ABCDEFG Use the  symbols to convert the all lowercase characters in a string to uppercase.  redhat-developer rhdevelopers developers.redhat.com MSG"TuVwXyZ" echo MSG, returns tuVwXyZ Use the , symbol to convert the first character in a string to lowercase. , MSG"TuVwXyZ" echo MSG,, returns tuvwxyz Use the ,, symbols to convert all characters in a string to lowercase. ,, Collections The following sections describe how to group data as a collection in a bash script. Bash supports two types of collections. One type is an array. The other type is a map. An array is a collection in which elements of the collection are accessed according to a number. A map is a collection in which elements of the collection a key value. array array map map Arrays Creating an array myarray\'Alex\' \'Ada\' \'Alexandra\' The following creates an array with three elements and assigns the array to the variable named myarray. myarray', "Removing an element to an array unset myarray3 The following uses the unset keyword to remove the fourth element from the array named myarray at index 3. unset myarray 3 redhat-developer rhdevelopers developers.redhat.com Viewing data in an array echo myarray0 The following uses an index number to view the data in the first element of the array named myarray. myarray Getting the number of elements in an array echo names  3 The following uses the  and  symbols to get a count of the number of elements in the array named myarray. myarray   Copy, paste and run in your terminal: Copy and paste the following code into your terminal window to create and execute a Bash script with the filename arrays-01.sh. The Bash script demonstrates the array commands described above. arrays-01.sh echo myarray2 The following uses an index number to view the data in the third element of the array named myarray. myarray echo myarray The following uses the  symbol to view all elements in the array named myarray. myarray  Adding an element to an array myarray'Soto' The following uses the  operator to add an element with the value Soto to the array named myarray. myarray Soto", 'cat  \'EOF\'  arrays-01.sh !usrbinenv bash names\'Alex\' \'Ada\' \'Alexandra\' names\'Soto\'  Appends element, Soto unset names3  Removes element at index 3, Soto echo names0  Alex echo names1  Ada echo names2  Alexandra   indicates all elements in the array echo names  Alex Ada Alexandra  Count of names echo names  3 EOF bash arrays-01.sh redhat-developer rhdevelopers developers.redhat.com Maps In Bash, a map is a collection of elements that are organized as key-value pairs. Another way to think of a map is as a named associative array. To access an element in a map you reference its key. Creating a map You create a map using the command declare -A mapname WHERE the option -A indicates that the variable represents an associative array, which is that same as a map. declare -A mapname -A Examples: The following example demonstrates creating a map variable named score. The variable score has four elements that describe the scores of four people named alex, edson, sebi and chris. score score alex edson sebi chris declare -A score scorealex"1" scoreedson"2" scoresebi"3" scorechris"4" echo !score The following example demonstrates using the ! and  symbols to show all the keys in the map named score. !', 'unset scorechris  Delete chris entry The following example demonstrates using the unset keyword to delete the element identified by the key chris from the map variable named score. unset score chris redhat-developer rhdevelopers developers.redhat.com echo score  show all the values The following example demonstrates using the  symbol to show all the values in the map named score.  score echo scoreedson  show the value of edson: 2 The following example demonstrates calling the value of the element associated with the key edson. edson echo score  show the number of elements in the map: 3 The following example demonstrates using the  and  symbols to get a count of the number of elements in the map variable named score. score   Examples: cat  \'EOF\'  maps-01.sh !usrbinenv bash declare -A score scorealex"1" scoreedson"2" scoresebi"3" scorechris"4" echo !score  alex edson sebi chris unset scorechris  Delete chris entry echo score  show all the values echo !score  show all keys echo scoreedson  show the value of edson: 2 echo score  show the number of elements in the map: 3 EOF bash maps-01.sh Copy, paste and run in your terminal: Collections Functions provide a way to group commands in a bash script together under a common name for reuse.', 'Basic function syntax redhat-developer rhdevelopers developers.redhat.com Using parameters The following demonstrates basic function syntax. The function is named printmessages. The function uses the echo command to send two messages to standard output. printmessages Parameters are passed to a function implicitly when added to the execution command of the function. Parameters are detected in a function by using the  symbol to call the parameter according the position of the parameter in the command line. The following code demonstrates a function that reads the parameter passed as the first argument in the command line.  printmessages  echo "I am message 1" echo "I am message 2"  Copy, paste and run in your terminal: Copy, paste and run in your terminal: Copy and paste the following code into your terminal window to create and execute a Bash script that has a function named printmessages. printmessages Copy and paste the following code into your terminal window to create and execute a Bash script that has a function named helloworld that processes the first parameter in the command line execution. helloworld cat  \'EOF\'  function-example-01.sh !usrbinenv bash printmessages  echo "I am message 1" echo "I am message 2"   call the function printmessages EOF bash function-example-01.sh chelloworld  echo "Hello World from 1"  helloworld "Alex"', 'cat  \'EOF\'  function-example-02.sh !usrbinenv bash helloworld  echo "Hello World from 1"   call the function helloworld "Alex" EOF bash function-example-02.sh redhat-developer rhdevelopers developers.redhat.com cat  \'EOF\'  function-example-03.sh !usrbinenv bash helloworld  echo "Hello World from 1 and 2"   call the function helloworld "Alex" "Edson" EOF bash function-example-03.sh Returns Hello World from Alex Hello World from Alex Returns Hello World from Alex and Edson Hello World from Alex and Edson Copy, paste and run in your terminal: Copy and paste the following code into your terminal window to create and execute a Bash script that has a function named helloworld that processes the two parameters in the command line execution. helloworld Setting a global variable A function can write data to a variable previous defined in a Bash script. The following bash script demonstrates the technique. function setfavoritefood favoritefood1  favoritefood"apples" echo favoritefood setfavoritefood "cheese" echo favoritefood Copy, paste and run in your terminal:', 'Returns redhat-developer rhdevelopers developers.redhat.com cat  \'EOF\'  function-04.sh setfavoritefood favoritefood1  favoritefood"apples" echo favoritefood setfavoritefood "cheese" echo favoritefood EOF bash function-04.sh apples cheese if statement; then consequence statements fi if statement; then consequence statements else consequence statements fi Conditional statements A conditional statement is an if.then.else statement. When writing a conditional statement you check to see if an expression is true or false and respond accordingly. A simple conditional statement uses the following syntax: if.then.else WHERE if, then and fi are keywords with if indicating the beginning of the conditional statement and fi indicating the end of the conditional statement. An if.then conditional statement uses the following syntax with the else keyword : if then fi if if if.then fi Numeric statements The following bash script demonstrates using a conditional statement to test numeric values. The code uses the RANDOM function to get a random number. RANDOM is defined by the operating system and always present. The expr keyword is the bash command that evaluates an expression. Also, the bash script uses the predefined modulus  operator which is available to the script by default from the operating system. RANDOM expr  RANDOM', 'mynumRANDOM echo mynum if  expr mynum  2  "0" ; then echo even else echo odd fi redhat-developer rhdevelopers developers.redhat.com cat  \'EOF\'  conditional-example-01.sh !usrbinenv bash mynumRANDOM echo mynum if  expr mynum  2  "0" ; then echo even else echo odd fi EOF bash conditional-example-01.sh mystring"I like cherries" positiveindicator" like " if  "mystring"  "positiveindicator" ; then echo "It\'s a good review" fi EOF Copy, paste and run in your terminal: Copy, paste and run in your terminal: Copy and paste the following code into your terminal window to create and execute a Bash script that creates a random number and then runs an if.then.else conditional statement to determine if the random value is even or odd. if.then.else Copy and paste the following code into your terminal window to create and execute a Bash script that tests if certain substrings exist and do not exist in a string provided as a parameter to the script. String statements The following bash script demonstrates using a conditional statement to check if a word exists in a string.', 'cat  \'EOF\'  conditional-example-02.sh !usrbinenv bash mystring1 positiveindicator" like " negativeindicator" don\'t " if  "mystring"  "positiveindicator"    "mystring" ! "negativeindicator" ; then echo "It\'s a good review." else echo "It\'s a bad review." fi EOF bash conditional-example-02.sh "I like cherries" bash conditional-example-02.sh "I hate cherries" bash conditional-example-02.sh "I don\'t like cherries" bash conditional-example-02.sh "I like apple" redhat-developer rhdevelopers developers.redhat.com FILEpathtofilename if test -f "FILE"; then echo "FILE exists." fi touch newfile.txt cat  \'EOF\'  conditional-example-03.sh !usrbinenv bash FILEnewfile.txt if test -f "FILE"; then echo "FILE exists." fi EOF bash conditional-example-03.sh File statements The following bash script demonstrates using a conditional statement to determine if a file exists. Copy, paste and run in your terminal: Copy and paste the following to create a file and then run the Bash script that checks for the files existence. Loops', 'Looping is a technique that enables Bash scripts to run programming statements and expressions continuously. The following sections describe different types of loops. redhat-developer rhdevelopers developers.redhat.com Range Looping collections The following code demonstrates running a loop over a range according to lower and upper limits. The following code uses the do keyword to demonstrate running printing all elements from a plain array: for i in 1.5; do echo "Hello World i" done for i in "names"; do echo "Hello i" done cat  \'EOF\'  basic-range-01.sh !usrbinenv bash for i in 1.5; do echo "Hello World i" done EOF bash basic-range-01.sh cat  \'EOF\'  range-names-01.sh !usrbinenv bash names\'Alex\' \'Ada\' \'Alexandra\', \'Soto\' for i in "names"; do echo "Hello i" done EOF bash range-names-01.sh Copy, paste and run in your terminal: Copy, paste and run in your terminal: Copy and paste the code to run a Bash script that runs a loop over 5 iterations. Copy and paste the code to run a Bash script that prints all the elements in an array using a for loop and the  keyword. for  do', 'redhat-developer rhdevelopers developers.redhat.com for key in "!score"; do echo key done for val in "score"; do echo val done Print keys of all elements from a keyvalue array: Print keys of all elements from a keyvalue array: cat  \'EOF\'  range-keys-01.sh !usrbinenv bash declare -A score scorealex"1" scoreedson"2" scoresebi"3" scorechris"4" for key in "!score"; do echo key done EOF bash range-keys-01.sh cat  \'EOF\'  value-keys-01.sh !usrbinenv bash declare -A score scorealex"1" scoreedson"2" scoresebi"3" scorechris"4" for val in "score"; do echo val done EOF bash value-keys-01.sh Copy, paste and run in your terminal: Copy, paste and run in your terminal: Copy and paste the code to run a Bash script that prints all the elements in a keyvalue array. Files and directories', 'for i in tmp.log; do echo i done redhat-developer rhdevelopers developers.redhat.com for i in var; do echo basename "i" done cat  \'EOF\'  files-01.sh !usrbinenv bash echo All log files in the tmp directory for i in tmp.log; do echo i done EOF bash files-01.sh cat  \'EOF\'  files-02.sh !usrbinenv bash echo All subdirectories in var for i in var; do echo basename "i" done EOF bash files-02.sh Get all files in a directory sub-directories Get all sub-directories Copy, paste and run in your terminal: Copy, paste and run in your terminal: The following script gets all files in the directory tmp that have the extension .log: tmp .log The following script gets all subdirectories in the directory var var Copy and paste the code to run a Bash script that traverses all the subdirectories in the directory var. var A while loop runs continuously until a certain condition is met. The following code uses the less then or equal to symbol -le to run a loop until the counter variable x reaches the number 5. -le x x 5 While loop', 'x1; while  x -le 5 ; do echo "Hello World" xx1 done redhat-developer rhdevelopers developers.redhat.com cat  \'EOF\'  while-loop-01.sh !usrbinenv bash x1; while  x -le 5 ; do echo "Hello World" xx1 done EOF bash while-loop-01.sh Copy, paste and run in your terminal: Copy and paste the following code to create and run a Bash script that demonstrates a while loop. while Reporting success and error in a Bash script is accomplished using status codes. By convention success is reported by exiting with the number 0. Any number greater than 0 indicates an error. Also, there is a convention for error numbers which is explained in the article on Red Hat System Admin Bash command line exit codes demystified. 0 0 Working with status codes The following demonstrates a Bash code that returns an error code 22 when the script is executed without a parameter. 22 if  -z "1" ; then echo "No parameter"; exit 22; fi Using the exit keyword Copy, paste and run in your terminal: Copy and paste the following code to create and run a Bash script that returns an error code when the script is executed without a parameter.', 'cat  \'EOF\'  status-code-01.sh !usrbinenv bash if  -z "1" ; then echo "No parameter"; exit 22; fi EOF bash status-code-01.sh echo ? redhat-developer rhdevelopers developers.redhat.com Returns 22 The following code demonstrates using the return keyword to return a status code from a function in a Bash script. return The first result of the call to echoMessage is 22 Bash Rocks! after the IFTHEN STATEMENT The second result of the call to echoMessage is 0 function echoMessage if  -z "1" ; then return 22; fi  cat  \'EOF\'  status-code-02.sh !usrbinenv bash function echoMessage if  -z "1" ; then return 22; fi echo 1 after the IFTHEN STATEMENT  echoMessage res? echo The first result of the call to echoMessage is res echoMessage "Bash Rocks!" res? echo The second result of the call to echoMessage is res EOF bash status-code-02.sh Return a status value from a function Returns']127.0.0.1 - - [31/May/2025 05:30:00] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 05:30:14] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 05:33:40] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 05:34:09] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 13:50:26] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 13:50:27] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [31/May/2025 13:50:44] "POST /upload_pdf HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 13:50:53] "POST /upload_url HTTP/1.1" 200 -

18 documents prepared for vectorization
Using latest vector DB: ./vector_dbs/guest_053120250529
{'query': 'Explain the bash commands', 'result': 'The bash commands mentioned in the context are part of a scripting language called Bash. Bash is a commonly used shell on Unix-like operating systems. \n\n1. The first command mentioned is `!usrbinenv bash`. This command is a shebang line that specifically tells the operating system to use the `bash` interpreter to run the script. It is usually placed at the beginning of a Bash script file and indicates which interpreter should be used to execute the script.\n\n2. The second command mentioned is `for i in 1.5; do echo "Hello World i" done`. This is a loop construct in Bash that demonstrates running a loop for a specific range (in this case, from 1 to 5). Inside the loop, it prints the message "Hello World" followed by the value of `i`.\n\nThe mentioned commands are examples of how to run Bash scripts and how to use loop constructs in a Bash script.'}
[Document(id='4fe68248-864a-4a9b-9985-24d31880284e', metadata={'page': 1, 'source': './KB/PDF/guest_053120250529/Bash-commands-cheat-sheet-Red-Hat-Developer.pdf', 'type': 'pdf'}, page_content='Looping is a technique that enables Bash scripts to run programming statements and expressions continuously. The following sections describe different types of loops. redhat-developer rhdevelopers developers.redhat.com Range Looping collections The following code demonstrates running a loop over a range according to lower and upper limits. The following code uses the do keyword to demonstrate running printing all elements from a plain array: for i in 1.5; do echo "Hello World i" done for i in "names"; do echo "Hello i" done cat  \'EOF\'  basic-range-01.sh !usrbinenv bash for i in 1.5; do echo "Hello World i" done EOF bash basic-range-01.sh cat  \'EOF\'  range-names-01.sh !usrbinenv bash names\'Alex\' \'Ada\' \'Alexandra\', \'Soto\' for i in "names"; do echo "Hello i" done EOF bash range-names-01.sh Copy, paste and run in your terminal: Copy, paste and run in your terminal: Copy and paste the code to run a Bash script that runs a loop over 5 iterations. Copy and paste the code to run a Bash script that prints all the elements in an array using a for loop and the  keyword. for  do'), Document(id='50602939-e75f-4875-aac1-3f18c51fe220', metadata={'source': './KB/PDF/guest_053120250529/Bash-commands-cheat-sheet-Red-Hat-Developer.pdf', 'page': 1, 'type': 'pdf'}, page_content='Running a Bash script redhat-developer rhdevelopers developers.redhat.com Using a shebang header There are two ways to run a Bash script. The first way is to execute it as a parameter of a direct call to the bash executable binary, like so:  bash myscript Hello from Bash WHERE the content of the file myscript is as follows: echo "Hello from Bash" myscript The second way to use the chmod command to change the permissions of the bash script to make it a standalone executable, like so:  chmod x .myscript  .myscript chmod bash Bash commands Cheat sheet A Bash script is a text file that contains programming statements that execute commands that are part of the host computers operating system. Typically system administrators and programmers use Bash scripts to avoid having to repetitively execute tasks manually in a terminal. A typical use case for a Bash script is to do set up tasks for a newly provisioned computer. Thus, in addition to being a tool for system administrators and programmers, a Bash script can also be used by system provisioning software. The  symbol that proceeds commands in the examples represents the command line prompt. Unlike a binary executable file which knows how to interact with the computers operating system directly, a Bash script, which is always text based, requires another program to run its commands. This other program is called an interpreter. The interpreter that runs a Bash script is, as the name implies, bash. However, in other cases, a bash script can be run by another interpreter thats installed on the host computer. An example of another interpreter is sh . The way a Bash script lets the operating system know which interpreter to use is according to a declaration made at the first line of the script. This first line declaration is called a script header. It is also called a shebang. A shebang starts with the characters ! An example of a shebang is as follows: bash sh !')]
📂 New session folder created: guest_053120250533
📂 New session folder created: guest_053120250534
📂 New session folder created: guest_053120251350
['Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.', 'Coding agents let you put those conversations directly into the coding editor as they happen. At Agentuity, a lot of us start out in the coding editor whether it\'s brainstorming features, marketing ideas, or even planning sales. This way, context never gets lost, and the conversation\'s nuances become embedded directly into the code or documents we\'re creating. Prompting: Clear Context and Immediate Clarity Prompting isn\'t just about asking for code. It\'s about clearly communicating your intentions. Instead of writing lengthy docs, you have short, clear conversations with your agent. As Simon Willison puts it, "You get exactly what you prompt," highlighting the new skill developers must master: prompt crafting. When we use Devin at Agentuity, even Slack conversations can instantly become actionable tasks in code. The coding agent remembers and references this context, providing clarity and consistency without extra layers of management or documentation. Persistent Context: Keeping the "Why" Pull requests often miss the context behind code changes. A valuable improvement we\'re seeing is capturing the prompting contextthe conversation about "why"and embedding it into the PR itself. However, there\'s still room for improvement. Right now, once a PR is made, the rich context of conversations, prompts, and reasons behind changes disappears. Like requirements documents, these prompting contexts should persist permanently, ensuring humans and agents always understand the reasons behind changes. Imagine reviewing code changes and instantly understanding the reason behind each decision because the prompting conversation with the coding agent is included. This keeps decisions clear, makes onboarding faster, and helps everyone maintain clarity about project direction. We\'d like to see more context and prompt saving in the future. They really should become artifacts that can be attached to the code. Real-World Example: Our Workflow at Agentuity At Agentuity, coding agents handle tasks across our business:  Developing new software features  Writing blogs and marketing content  Preparing sales strategies', "Documenting processes and changelogs Devin, for instance, takes Slack and Linear discussions and directly translates them into clear, actionable coding tasks. We dont need extra meetings because the entire context is already right therecaptured by the coding agent as we talk through it. Simplifying Collaboration Coding agents streamline teamwork. Instead of handing off ideas through multiple layers of communication, the agent captures it directly. Code reviews become simpler, more context- rich, and less prone to confusion or misunderstanding. We at Agentuity definitely see quicker iterations and fewer trivial review comments, allowing us to focus on important decisions. Conclusion The cultural change driven by coding agents is practical, immediate, and powerful. Capturing conversations directly in the coding editor saves time, preserves clarity, and simplifies collaboration. It's a wild new world and way to work-and we're here for all of it. Agentuity Agentuity is a cloud platform designed specifically for building, deploying, and scaling autonomous AI agents. It provides the infrastructure and tools necessary to manage agents built with any framework, such as CrewAI, LangChain, or custom code. With Agentuity, you can:  Deploy agents with a single command  Monitor real-time performance and analytics  Scale agents effortlessly  Connect agents to various channels API, chat, webhooks, email, SMS, voice  Use any AI agent framework Agentuity Platform Overview Getting Started Create an Account Create an Agentuity account or Sign in to the cloud portal.", 'Install the CLI macOSLinuxWindows WSL curl -fsS https:agentuity.sh  sh Login to Agentuity agentuity login Create Your First Project agentuity new Deploy Your Project agentuity deploy Access Your Agent\'s Webhook After deploying your agent, you can find its webhook URL in the agent\'s dashboard: 1. Navigate to your agent in the Agentuity Cloud Console 2. Click on the "Connections" tab or the webhook icon in the IO visualization 3. In the "Inbound Webhook" modal, you\'ll find the webhook URL and configuration options This webhook URL is what you\'ll use to send requests to your agent from external applications.']
127.0.0.1 - - [31/May/2025 13:51:20] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 13:52:29] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [31/May/2025 13:52:53] "POST /data HTTP/1.1" 200 -
Public URL: https://c11da0c8a760.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [14/Jul/2025 16:26:15] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 16:26:18] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [14/Jul/2025 16:27:11] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 16:27:26] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 16:27:27] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
ERROR:  authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
ERROR:  You can run multiple simultaneous tunnels from a single agent session by defining the tunnels in your agent configuration file and starting them with the command `ngrok start --all`.
ERROR:  Read more about the agent configuration file: https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config
ERROR:  You can view your current agent sessions in the dashboard:
ERROR:  https://dashboard.ngrok.com/agents
ERROR:  
ERROR:  ERR_NGROK_108
ERROR:  https://ngrok.com/docs/errors/err_ngrok_108
ERROR:  
Public URL: https://c11da0c8a760.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [14/Jul/2025 16:35:28] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 16:36:30] "GET / HTTP/1.1" 200 -
ERROR:  authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
ERROR:  You can run multiple simultaneous tunnels from a single agent session by defining the tunnels in your agent configuration file and starting them with the command `ngrok start --all`.
ERROR:  Read more about the agent configuration file: https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config
ERROR:  You can view your current agent sessions in the dashboard:
ERROR:  https://dashboard.ngrok.com/agents
ERROR:  
ERROR:  ERR_NGROK_108
ERROR:  https://ngrok.com/docs/errors/err_ngrok_108
ERROR:  
Public URL: https://c11da0c8a760.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [14/Jul/2025 16:58:56] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 17:05:59] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 17:06:07] "GET / HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [14/Jul/2025 17:49:33] "POST /transcribe HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 17:49:48] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 17:49:52] "POST /plain_english HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [14/Jul/2025 17:51:19] "POST /transcribe HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 21:16:32] "POST /upload_pdf HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 21:16:51] "POST /data HTTP/1.1" 200 -
📂 New session folder created: guest_071420251658
Using latest vector DB: ./vector_dbs/guest_053120251350
{'query': 'cfbccgfhcgfh', 'result': 'I\'m sorry, I don\'t understand the text "cfbccgfhcgfh" you\'ve provided. If you have a question or need information, please feel free to ask!'}
[Document(id='df821ca6-fa54-497e-b236-4bc3dc9fe04a', metadata={'source': './KB/PDF/guest_053120251350/Coding Agents.pdf', 'page': 1, 'type': 'pdf'}, page_content='Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.'), Document(id='3e8bdc16-b9eb-4d9a-91e4-5ffc937be5b3', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
📂 New session folder created: guest_071420251706
Using latest vector DB: ./vector_dbs/guest_053120251350
{'query': 'who is Subra', 'result': "I don't know who Subra is based on the context provided."}
[Document(id='df821ca6-fa54-497e-b236-4bc3dc9fe04a', metadata={'source': './KB/PDF/guest_053120251350/Coding Agents.pdf', 'page': 1, 'type': 'pdf'}, page_content='Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.'), Document(id='ba88207a-1458-459e-9e03-6e6b8b907c70', metadata={'type': 'pdf', 'page': 1, 'source': './KB/PDF/guest_053120251350/Coding Agents.pdf'}, page_content="Documenting processes and changelogs Devin, for instance, takes Slack and Linear discussions and directly translates them into clear, actionable coding tasks. We dont need extra meetings because the entire context is already right therecaptured by the coding agent as we talk through it. Simplifying Collaboration Coding agents streamline teamwork. Instead of handing off ideas through multiple layers of communication, the agent captures it directly. Code reviews become simpler, more context- rich, and less prone to confusion or misunderstanding. We at Agentuity definitely see quicker iterations and fewer trivial review comments, allowing us to focus on important decisions. Conclusion The cultural change driven by coding agents is practical, immediate, and powerful. Capturing conversations directly in the coding editor saves time, preserves clarity, and simplifies collaboration. It's a wild new world and way to work-and we're here for all of it. Agentuity Agentuity is a cloud platform designed specifically for building, deploying, and scaling autonomous AI agents. It provides the infrastructure and tools necessary to manage agents built with any framework, such as CrewAI, LangChain, or custom code. With Agentuity, you can:  Deploy agents with a single command  Monitor real-time performance and analytics  Scale agents effortlessly  Connect agents to various channels API, chat, webhooks, email, SMS, voice  Use any AI agent framework Agentuity Platform Overview Getting Started Create an Account Create an Agentuity account or Sign in to the cloud portal.")]
Using latest vector DB: ./vector_dbs/guest_053120251350
{'query': 'tell me about Raju', 'result': "I don't have any information about Raju based on the context provided."}
127.0.0.1 - - [14/Jul/2025 21:17:07] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 21:17:53] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 21:18:16] "POST /upload_pdf HTTP/1.1" 200 -
127.0.0.1 - - [14/Jul/2025 21:18:36] "POST /upload_pdf HTTP/1.1" 200 -
[Document(id='df821ca6-fa54-497e-b236-4bc3dc9fe04a', metadata={'source': './KB/PDF/guest_053120251350/Coding Agents.pdf', 'type': 'pdf', 'page': 1}, page_content='Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.'), Document(id='ba88207a-1458-459e-9e03-6e6b8b907c70', metadata={'source': './KB/PDF/guest_053120251350/Coding Agents.pdf', 'page': 1, 'type': 'pdf'}, page_content="Documenting processes and changelogs Devin, for instance, takes Slack and Linear discussions and directly translates them into clear, actionable coding tasks. We dont need extra meetings because the entire context is already right therecaptured by the coding agent as we talk through it. Simplifying Collaboration Coding agents streamline teamwork. Instead of handing off ideas through multiple layers of communication, the agent captures it directly. Code reviews become simpler, more context- rich, and less prone to confusion or misunderstanding. We at Agentuity definitely see quicker iterations and fewer trivial review comments, allowing us to focus on important decisions. Conclusion The cultural change driven by coding agents is practical, immediate, and powerful. Capturing conversations directly in the coding editor saves time, preserves clarity, and simplifies collaboration. It's a wild new world and way to work-and we're here for all of it. Agentuity Agentuity is a cloud platform designed specifically for building, deploying, and scaling autonomous AI agents. It provides the infrastructure and tools necessary to manage agents built with any framework, such as CrewAI, LangChain, or custom code. With Agentuity, you can:  Deploy agents with a single command  Monitor real-time performance and analytics  Scale agents effortlessly  Connect agents to various channels API, chat, webhooks, email, SMS, voice  Use any AI agent framework Agentuity Platform Overview Getting Started Create an Account Create an Agentuity account or Sign in to the cloud portal.")]
Using latest vector DB: ./vector_dbs/guest_053120251350
{'query': 'You dont know Subra T Raju', 'result': "I don't know Subra T Raju."}
[Document(id='df821ca6-fa54-497e-b236-4bc3dc9fe04a', metadata={'page': 1, 'source': './KB/PDF/guest_053120251350/Coding Agents.pdf', 'type': 'pdf'}, page_content='Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.'), Document(id='3e8bdc16-b9eb-4d9a-91e4-5ffc937be5b3', metadata={'type': 'url', 'source': 'https://finance.yahoo.com/news/this-week-in-trumponomics-consumer-freakout-140021381.html'}, page_content='This week in Trumponomics: Consumer freakout President Trump says "tariff" is the "most beautiful word" he knows. Many Americans wish it were banned from the language. Trump\'s imposed and threatened tariffs on imports have pounded consumers\' attitudes about the economy, as Americans brace for soaring prices, product shortages, and worse. Tariffs are an arcane throwback to old-timey economies that predate air travel and computer chips. Yet Americans get the gist, and they\'re increasingly alarmed. The University of Michigan consumer sentiment index for April hit its lowest level since the middle of 2022, when the inflation that vexed Joe Biden\'s presidency was at its peak. Back then, inflation was nearly 9% and gasoline was close to $5 per gallon. The rising cost of food, rent, and many everyday things enraged consumers and sent President Biden\'s approval rating to its lowest level until that point. It never recovered. Trump, inexplicably, is replaying the Biden inflation story as if he\'ll end up with a better outcome. Trump inherited relatively low inflation, with year-over-year price gains of 3% when he took office in January and just 2.4% in March, the latest reading. Read more: 7 ways to recession-proof your savings But those are pre-tariff numbers, and they\'re not what most Americans are focusing on. Instead, they\'re preparing for price and supply shocks that are likely to begin in a few months as Trump\'s import tariffs careen through the economy. Read more: The latest news and updates on Trump\'s tariffs Trump has raised the average tax on $3 trillion worth of imports from a low 2.5% when he took office to a hefty 27%. If import purchases stayed the same, that would be a tax hike on American businesses and consumers of more than $700 billion. But the tariffs on some imports, especially those from China, are so high that they\'ll distort markets and change the whole flow of products. Trump\'s tariff of 145% on most Chinese imports is so prohibitive that cargo ships aren\'t even docking because importers can\'t or won\'t pay such a high tax. If this goes on, the inevitable result will be shortages of clothing, electronics, pharmaceuticals, and many other products by summer or fall, along with higher prices for the stuff that passes through or avoids Trump\'s tariff dragnet. Drop Rick Newman a note, follow him on Bluesky, or sign up for his newsletter. Consumers haven\'t pulled back on spending yet. In fact, they may be stocking up in anticipation of higher prices later. But they clearly see a shock coming. In the Michigan survey, respondents said they expect the inflation rate in 12 months to be 6.5%. That\'s the highest inflation outlook since 1981. During the worst of Bidenflation, the one-year inflation outlook only got as high as 5.4%. Americans are expecting worse inflation under Trump than they did under Biden.')]
Using latest vector DB: ./vector_dbs/guest_053120251350
{'query': 'Who is Gen AI architect', 'result': "I don't have information about a specific individual known as *Gen AI architect* in the context provided."}
127.0.0.1 - - [14/Jul/2025 21:18:49] "POST /data HTTP/1.1" 200 -
Public URL: https://25b7e3debec1.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [15/Jul/2025 14:57:08] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 14:57:09] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [15/Jul/2025 14:59:16] "POST /upload_url HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 14:59:21] "POST /upload_pdf HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 14:59:41] "POST /upload_pdf HTTP/1.1" 200 -
📂 New session folder created: guest_071520251457
['Coding Agents Are Changing Engineering Culture May 20, 2025 by Rick Blalock Engineering culture is experiencing a practical shiftone that\'s changing how we communicate about software and product ideas. Coding agents aren\'t just about autocompletion anymore; they\'re capturing conversations that used to happen outside the coding editor. Ever think to yourself, "Why even have long meetings about requirements without an agentic coding editor these days?" Thoughts and decisions can be captured instantly, right as you discuss them, directly inside your coding editor. Conversations Move Into Code Software requirements and design decisions are usually discussed in meetings or calls. These conversations are often translated later by engineers writing the code. We all know how this goes. The PM wasn\'t clear, the customer was misunderstood, the engineer slightly misinterpreted the requirements. Then there\'s endless back and forth to get it right-checking the requirements, checking the code, checking the requirements again, talking to the PM, talking to the customer, etc.', 'Coding agents let you put those conversations directly into the coding editor as they happen. At Agentuity, a lot of us start out in the coding editor whether it\'s brainstorming features, marketing ideas, or even planning sales. This way, context never gets lost, and the conversation\'s nuances become embedded directly into the code or documents we\'re creating. Prompting: Clear Context and Immediate Clarity Prompting isn\'t just about asking for code. It\'s about clearly communicating your intentions. Instead of writing lengthy docs, you have short, clear conversations with your agent. As Simon Willison puts it, "You get exactly what you prompt," highlighting the new skill developers must master: prompt crafting. When we use Devin at Agentuity, even Slack conversations can instantly become actionable tasks in code. The coding agent remembers and references this context, providing clarity and consistency without extra layers of management or documentation. Persistent Context: Keeping the "Why" Pull requests often miss the context behind code changes. A valuable improvement we\'re seeing is capturing the prompting contextthe conversation about "why"and embedding it into the PR itself. However, there\'s still room for improvement. Right now, once a PR is made, the rich context of conversations, prompts, and reasons behind changes disappears. Like requirements documents, these prompting contexts should persist permanently, ensuring humans and agents always understand the reasons behind changes. Imagine reviewing code changes and instantly understanding the reason behind each decision because the prompting conversation with the coding agent is included. This keeps decisions clear, makes onboarding faster, and helps everyone maintain clarity about project direction. We\'d like to see more context and prompt saving in the future. They really should become artifacts that can be attached to the code. Real-World Example: Our Workflow at Agentuity At Agentuity, coding agents handle tasks across our business:  Developing new software features  Writing blogs and marketing content  Preparing sales strategies', "Documenting processes and changelogs Devin, for instance, takes Slack and Linear discussions and directly translates them into clear, actionable coding tasks. We dont need extra meetings because the entire context is already right therecaptured by the coding agent as we talk through it. Simplifying Collaboration Coding agents streamline teamwork. Instead of handing off ideas through multiple layers of communication, the agent captures it directly. Code reviews become simpler, more context- rich, and less prone to confusion or misunderstanding. We at Agentuity definitely see quicker iterations and fewer trivial review comments, allowing us to focus on important decisions. Conclusion The cultural change driven by coding agents is practical, immediate, and powerful. Capturing conversations directly in the coding editor saves time, preserves clarity, and simplifies collaboration. It's a wild new world and way to work-and we're here for all of it. Agentuity Agentuity is a cloud platform designed specifically for building, deploying, and scaling autonomous AI agents. It provides the infrastructure and tools necessary to manage agents built with any framework, such as CrewAI, LangChain, or custom code. With Agentuity, you can:  Deploy agents with a single command  Monitor real-time performance and analytics  Scale agents effortlessly  Connect agents to various channels API, chat, webhooks, email, SMS, voice  Use any AI agent framework Agentuity Platform Overview Getting Started Create an Account Create an Agentuity account or Sign in to the cloud portal.", 'Install the CLI macOSLinuxWindows WSL curl -fsS https:agentuity.sh  sh Login to Agentuity agentuity login Create Your First Project agentuity new Deploy Your Project agentuity deploy Access Your Agent\'s Webhook After deploying your agent, you can find its webhook URL in the agent\'s dashboard: 1. Navigate to your agent in the Agentuity Cloud Console 2. Click on the "Connections" tab or the webhook icon in the IO visualization 3. In the "Inbound Webhook" modal, you\'ll find the webhook URL and configuration options This webhook URL is what you\'ll use to send requests to your agent from external applications.']
["Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video.", 'Runnable interface: The base abstraction that many LangChain components and the LangChain Expression Language are built on.  Streaming: LangChain streaming APIs for surfacing results as they are generated.  LangChain Expression Language LCEL: A syntax for orchestrating LangChain components. Most useful for simpler applications.  Document loaders: Load a source as a list of documents.  Retrieval: Information retrieval systems can retrieve structured or unstructured data from a datasource in response to a query.  Text splitters: Split long text into smaller chunks that can be individually indexed to enable granular retrieval.  Embedding models: Models that represent data such as text or images in a vector space.  Vector stores: Storage of and efficient search over vectors and associated metadata.  Retriever: A component that returns relevant documents from a knowledge base in response to a query.  Retrieval Augmented Generation RAG: A technique that enhances language models by combining them with external knowledge bases.  Agents: Use a language model to choose a sequence of actions to take. Agents can interact with external resources via tool.  Prompt templates: Component for factoring out the static parts of a model "prompt" usually a sequence of messages. Useful for serializing, versioning, and reusing these static parts.  Output parsers: Responsible for taking the output of a model and transforming it into a more suitable format for downstream tasks. Output parsers were primarily useful prior to the general availability of tool calling and structured outputs.  Few-shot prompting: A technique for improving model performance by providing a few examples of the task to perform in the prompt.  Example selectors: Used to select the most relevant examples from a dataset based on a given input. Example selectors are used in few-shot prompting to select examples for a prompt.', "Callbacks: Callbacks enable the execution of custom auxiliary code in built-in components. Callbacks are used to stream outputs from LLMs in LangChain, trace the intermediate steps of an application, and more.  Tracing: The process of recording the steps that an application takes to go from input to output. Tracing is essential for debugging and diagnosing issues in complex applications.  Evaluation: The process of assessing the performance and effectiveness of AI applications. This involves testing the model's responses against a set of predefined criteria or benchmarks to ensure it meets the desired quality standards and fulfills the intended purpose. This process is vital for building reliable applications. Glossary  AIMessageChunk: A partial response from an AI message. Used when streaming responses from a chat model.  AIMessage: Represents a complete response from an AI model.  StructuredTool: The base class for all tools in LangChain.  batch: Use to execute a runnable with batch inputs a Runnable.  bindTools: Allows models to interact with tools.  Caching: Storing results to avoid redundant calls to a chat model.  Context window: The maximum size of input a chat model can process.  Conversation patterns: Common patterns in chat interactions.  Document: LangChain's representation of a document.  Embedding models: Models that generate vector embeddings for various data types.  HumanMessage: Represents a message from a human user.  input and output types: Types used for input and output in Runnables.  Integration packages: Third-party packages that integrate with LangChain.  invoke: A standard method to invoke a Runnable.  JSON mode: Returning responses in JSON format.  langchaincommunity: Community-driven components for LangChain.", "langchaincore: Core langchain package. Includes base interfaces and in-memory implementations.  langchain: A package for higher level components e.g., some pre-built chains.  langchainlanggraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows.  Managing chat history: Techniques to maintain and manage the chat history.  OpenAI format: OpenAI's message format for chat models.  Propagation of RunnableConfig: Propagating configuration through Runnables.  RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph.  role: Represents the role e.g., user, assistant of a chat message.  RunnableConfig: Use to pass run time information to Runnables e.g., runName, runId, tags, metadata, maxConcurrency, recursionLimit, configurable.  Standard parameters for chat models: Parameters such as API key, temperature, and maxTokens,  stream: Use to stream output from a Runnable or a graph.  Tokenization: The process of converting data into tokens and vice versa.  Tokens: The basic unit that a language model reads, processes, and generates under the hood.  Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing.  Tool binding: Binding tools to models.  tool: Function for creating tools in LangChain.  Toolkits: A collection of tools that can be used together.  ToolMessage: Represents a message that contains the results of a tool execution.  Vector stores: Datastores specialized for storing and efficiently searching vector embeddings.", 'withStructuredOutput: A helper method for chat models that natively support tool calling to get structured output matching a given schema specified via Zod, JSON schema or a function.']
127.0.0.1 - - [15/Jul/2025 15:00:52] "POST /create_vector_db HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 15:01:44] "POST /data HTTP/1.1" 200 -
Frequently Asked Questions: | LangSmith I can't create API keys or manage users in the UI, what's wrong? You have likely deployed LangSmith without setting up SSO. LangSmith requires SSO to manage users and API keys. You can find more information on setting up SSO in the configuration section. How does load balancing/ingress work? You will need to expose the frontend container/service to your applications/users. This will handle routing to all downstream services. You will need to terminate SSL at the ingress level. We recommend using a managed service like AWS ALB, GCP Load Balancer, or Nginx. How can we authenticate to the application? Currently, our self-hosted solution supports SSO with OAuth2.0 and OIDC as an authn solution. Note, we do offer a no-auth solution but highly recommend setting up oauth before moving into production. You can find more information on setting up SSO in the configuration section. Can I use external storage services? You can configure LangSmith to use external versions of all storage services. In a production setting, we strongly recommend using external storage services. Check out the configuration section for more information. Does my application need egress to function properly? Our deployment only needs egress for a few things (most of which can reside within your VPC): Fetching images (If mirroring your images, this may not be needed) Talking to any LLM endpoints Talking to any external storage services you may have configured Fetching OAuth information Subscription Metrics and Operational Metadata (if not running in offline mode) Requires egress to https://beacon.langchain.com See Egress for more information Your VPC can set up rules to limit any other access. Note: We require the X-Organization-Id and X-Tenant-Id headers to be allowed to be passed through to the backend service. These are used to determine which organization and workspace (previously called "tenant") the request is for. Resource requirements for the application? In kubernetes, we recommend a minimum helm configuration which can be found in here. For docker, we recommend a minimum of 16GB of RAM and 4 CPUs. For Postgres, we recommend a minimum of 8GB of RAM and 2 CPUs. For Redis, we recommend 4GB of RAM and 2 CPUs. For Clickhouse, we recommend 32GB of RAM and 8 CPUs.

i want to put multiple web page in webbased loder in langflow Issue #649 langflow-ai/langflow changed the title [-]i want to put multiple web page in webbased lower in langflow[/-] [+]i want to put multiple web page in webbased loder in langflow[/+] on Jul 14, 2023on Jul 14, 2023 ogabrielluiz commented on Jul 14, 2023 on Jul 14, 2023 I just got multiple WebBaseLoaders to connect to a TextSplitter on a dev version. We'll define a good way to implement this but it should be very soon. kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 i have already connected WebBaseLoaders to TextSplitter in langflow mapping need to Load multiple urls concurrently i have checked for one urls it is working fine but i need to implement for 2 or more urls load in WebBaseLoaders kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 how to implement in langflow mapping for 2 or more than page of urls , can you please help me ogabrielluiz commented on Jul 15, 2023 on Jul 15, 2023 That functionality is not available yet. We'll implement it in our next minor release kunal923476 commented on Jul 17, 2023 on Jul 17, 2023 stale commented on Aug 31, 2023 on Aug 31, 2023 This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.

11 documents prepared for vectorization
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'What is Langchain', 'result': 'LangChain is a framework that provides a set of tools and components for building AI applications, particularly in the domain of chat models. It includes packages for organizing components (like langchaincore and langchainlanggraph), managing chat history, handling message formats, propagating configuration information, tokenization, binding tools to models, and more. The framework allows for creating chat models that can process sequences of messages and generate appropriate responses, taking into account structured output, memory management, multimodality, and other aspects of conversational AI.'}
[Document(id='b859a11b-30ea-4250-a5d9-b1d868378600', metadata={'type': 'pdf', 'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf', 'page': 1}, page_content="Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video."), Document(id='39919c52-d597-414e-8fca-995babccb10d', metadata={'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf', 'page': 1, 'type': 'pdf'}, page_content="langchaincore: Core langchain package. Includes base interfaces and in-memory implementations.  langchain: A package for higher level components e.g., some pre-built chains.  langchainlanggraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows.  Managing chat history: Techniques to maintain and manage the chat history.  OpenAI format: OpenAI's message format for chat models.  Propagation of RunnableConfig: Propagating configuration through Runnables.  RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph.  role: Represents the role e.g., user, assistant of a chat message.  RunnableConfig: Use to pass run time information to Runnables e.g., runName, runId, tags, metadata, maxConcurrency, recursionLimit, configurable.  Standard parameters for chat models: Parameters such as API key, temperature, and maxTokens,  stream: Use to stream output from a Runnable or a graph.  Tokenization: The process of converting data into tokens and vice versa.  Tokens: The basic unit that a language model reads, processes, and generates under the hood.  Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing.  Tool binding: Binding tools to models.  tool: Function for creating tools in LangChain.  Toolkits: A collection of tools that can be used together.  ToolMessage: Represents a message that contains the results of a tool execution.  Vector stores: Datastores specialized for storing and efficiently searching vector embeddings.")]
Using latest vector DB: ./vector_dbs/guest_071520251457
127.0.0.1 - - [15/Jul/2025 15:02:48] "POST /data HTTP/1.1" 200 -
{'query': 'can we can we authenticate in langchain', 'result': 'Yes, you can authenticate to the application in LangSmith using Single Sign-On (SSO) with OAuth2.0 and OIDC as an authentication solution. It is important to note that setting up SSO is highly recommended before moving into production. You can find more information on setting up SSO in the configuration section of LangSmith.'}
[Document(id='d2d0f54a-cd75-4ea7-9037-cbdc9673caf4', metadata={'type': 'url', 'source': 'https://docs.smith.langchain.com/self_hosting/faq'}, page_content='Frequently Asked Questions: | LangSmith I can\'t create API keys or manage users in the UI, what\'s wrong? You have likely deployed LangSmith without setting up SSO. LangSmith requires SSO to manage users and API keys. You can find more information on setting up SSO in the configuration section. How does load balancing/ingress work? You will need to expose the frontend container/service to your applications/users. This will handle routing to all downstream services. You will need to terminate SSL at the ingress level. We recommend using a managed service like AWS ALB, GCP Load Balancer, or Nginx. How can we authenticate to the application? Currently, our self-hosted solution supports SSO with OAuth2.0 and OIDC as an authn solution. Note, we do offer a no-auth solution but highly recommend setting up oauth before moving into production. You can find more information on setting up SSO in the configuration section. Can I use external storage services? You can configure LangSmith to use external versions of all storage services. In a production setting, we strongly recommend using external storage services. Check out the configuration section for more information. Does my application need egress to function properly? Our deployment only needs egress for a few things (most of which can reside within your VPC): Fetching images (If mirroring your images, this may not be needed) Talking to any LLM endpoints Talking to any external storage services you may have configured Fetching OAuth information Subscription Metrics and Operational Metadata (if not running in offline mode) Requires egress to https://beacon.langchain.com See Egress for more information Your VPC can set up rules to limit any other access. Note: We require the X-Organization-Id and X-Tenant-Id headers to be allowed to be passed through to the backend service. These are used to determine which organization and workspace (previously called "tenant") the request is for. Resource requirements for the application? In kubernetes, we recommend a minimum helm configuration which can be found in here. For docker, we recommend a minimum of 16GB of RAM and 4 CPUs. For Postgres, we recommend a minimum of 8GB of RAM and 2 CPUs. For Redis, we recommend 4GB of RAM and 2 CPUs. For Clickhouse, we recommend 32GB of RAM and 8 CPUs.'), Document(id='b859a11b-30ea-4250-a5d9-b1d868378600', metadata={'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf', 'page': 1, 'type': 'pdf'}, page_content="Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video.")]
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'connected WebBaseLoaders to TextSplitter', 'result': 'The user connected WebBaseLoaders to TextSplitter in LangFlow mapping and was looking to load multiple URLs concurrently. However, the functionality to implement this for 2 or more URLs was not available at that time but was planned for implementation in the next minor release.'}
127.0.0.1 - - [15/Jul/2025 15:03:56] "POST /data HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [15/Jul/2025 15:05:22] "POST /transcribe HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 15:05:45] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 15:05:52] "POST /data HTTP/1.1" 200 -
[Document(id='7c25d1d4-11a2-47e5-b184-0b418d524a03', metadata={'type': 'url', 'source': 'https://github.com/langflow-ai/langflow/issues/649'}, page_content="i want to put multiple web page in webbased loder in langflow Issue #649 langflow-ai/langflow changed the title [-]i want to put multiple web page in webbased lower in langflow[/-] [+]i want to put multiple web page in webbased loder in langflow[/+] on Jul 14, 2023on Jul 14, 2023 ogabrielluiz commented on Jul 14, 2023 on Jul 14, 2023 I just got multiple WebBaseLoaders to connect to a TextSplitter on a dev version. We'll define a good way to implement this but it should be very soon. kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 i have already connected WebBaseLoaders to TextSplitter in langflow mapping need to Load multiple urls concurrently i have checked for one urls it is working fine but i need to implement for 2 or more urls load in WebBaseLoaders kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 how to implement in langflow mapping for 2 or more than page of urls , can you please help me ogabrielluiz commented on Jul 15, 2023 on Jul 15, 2023 That functionality is not available yet. We'll implement it in our next minor release kunal923476 commented on Jul 17, 2023 on Jul 17, 2023 stale commented on Aug 31, 2023 on Aug 31, 2023 This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."), Document(id='2903bbb8-100f-4d2c-85d8-4c89bcc963f5', metadata={'page': 1, 'type': 'pdf', 'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf'}, page_content='Runnable interface: The base abstraction that many LangChain components and the LangChain Expression Language are built on.  Streaming: LangChain streaming APIs for surfacing results as they are generated.  LangChain Expression Language LCEL: A syntax for orchestrating LangChain components. Most useful for simpler applications.  Document loaders: Load a source as a list of documents.  Retrieval: Information retrieval systems can retrieve structured or unstructured data from a datasource in response to a query.  Text splitters: Split long text into smaller chunks that can be individually indexed to enable granular retrieval.  Embedding models: Models that represent data such as text or images in a vector space.  Vector stores: Storage of and efficient search over vectors and associated metadata.  Retriever: A component that returns relevant documents from a knowledge base in response to a query.  Retrieval Augmented Generation RAG: A technique that enhances language models by combining them with external knowledge bases.  Agents: Use a language model to choose a sequence of actions to take. Agents can interact with external resources via tool.  Prompt templates: Component for factoring out the static parts of a model "prompt" usually a sequence of messages. Useful for serializing, versioning, and reusing these static parts.  Output parsers: Responsible for taking the output of a model and transforming it into a more suitable format for downstream tasks. Output parsers were primarily useful prior to the general availability of tool calling and structured outputs.  Few-shot prompting: A technique for improving model performance by providing a few examples of the task to perform in the prompt.  Example selectors: Used to select the most relevant examples from a dataset based on a given input. Example selectors are used in few-shot prompting to select examples for a prompt.')]
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'Can you describe what a Langflow is?', 'result': 'I\'m not familiar with the term "Langflow" in the context of the LangChain framework or AI applications. It may not be a defined concept within the materials provided. If you have any other questions or need clarification on a different topic, feel free to ask!'}
[Document(id='b859a11b-30ea-4250-a5d9-b1d868378600', metadata={'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf', 'page': 1, 'type': 'pdf'}, page_content="Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video."), Document(id='2903bbb8-100f-4d2c-85d8-4c89bcc963f5', metadata={'page': 1, 'type': 'pdf', 'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf'}, page_content='Runnable interface: The base abstraction that many LangChain components and the LangChain Expression Language are built on.  Streaming: LangChain streaming APIs for surfacing results as they are generated.  LangChain Expression Language LCEL: A syntax for orchestrating LangChain components. Most useful for simpler applications.  Document loaders: Load a source as a list of documents.  Retrieval: Information retrieval systems can retrieve structured or unstructured data from a datasource in response to a query.  Text splitters: Split long text into smaller chunks that can be individually indexed to enable granular retrieval.  Embedding models: Models that represent data such as text or images in a vector space.  Vector stores: Storage of and efficient search over vectors and associated metadata.  Retriever: A component that returns relevant documents from a knowledge base in response to a query.  Retrieval Augmented Generation RAG: A technique that enhances language models by combining them with external knowledge bases.  Agents: Use a language model to choose a sequence of actions to take. Agents can interact with external resources via tool.  Prompt templates: Component for factoring out the static parts of a model "prompt" usually a sequence of messages. Useful for serializing, versioning, and reusing these static parts.  Output parsers: Responsible for taking the output of a model and transforming it into a more suitable format for downstream tasks. Output parsers were primarily useful prior to the general availability of tool calling and structured outputs.  Few-shot prompting: A technique for improving model performance by providing a few examples of the task to perform in the prompt.  Example selectors: Used to select the most relevant examples from a dataset based on a given input. Example selectors are used in few-shot prompting to select examples for a prompt.')]
Using latest vector DB: ./vector_dbs/guest_071520251457
127.0.0.1 - - [15/Jul/2025 15:06:17] "POST /data HTTP/1.1" 200 -
127.0.0.1 - - [15/Jul/2025 15:06:59] "POST /plain_english HTTP/1.1" 200 -
{'query': 'Explain me Langchain', 'result': 'LangChain is a framework that provides a structured approach to building and implementing AI applications, specifically focusing on chat models. It offers tools and components that help in creating chat models that can process sequences of messages as input and generate appropriate responses. \n\nWithin the LangChain ecosystem, there are packages like `langchaincore` for foundational elements, `langchain` for higher-level components, and `langchainlanggraph` for orchestrating complex workflows. The framework also includes concepts like chat models, messages, chat history, tools, structured output, memory, multimodality, and more.\n\nLangChain allows for the creation of chat models that can interact with users by processing messages, invoking tools based on schemas, and generating responses in structured formats. The framework also supports features like managing chat history, using OpenAI message formats, propagating configurations through runnables, tokenization, tool binding, and vector stores.\n\nIn summary, LangChain offers a modular and organized approach to developing chat-based AI applications, streamlining the process of building, orchestrating, and managing conversational models.'}
[Document(id='b859a11b-30ea-4250-a5d9-b1d868378600', metadata={'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf', 'page': 1, 'type': 'pdf'}, page_content="Conceptual guide This guide provides explanations of the key concepts behind the LangChain framework and AI applications more broadly. We recommend that you go through at least one of the Tutorials before diving into the conceptual guide. This will provide practical context that will make it easier to understand the concepts discussed here. The conceptual guide does not cover step-by-step instructions or specific implementation examples  those are found in the How-to guides and Tutorials. For detailed reference material, please see the API reference. High level  Why LangChain?: Overview of the value that LangChain provides.  Architecture: How packages are organized in the LangChain ecosystem. Concepts  Chat models: LLMs exposed via a chat API that process sequences of messages as input and output a message.  Messages: The unit of communication in chat models, used to represent model input and output.  Chat history: A conversation represented as a sequence of messages, alternating between user messages and model responses.  Tools: A function with an associated schema defining the function's name, description, and the arguments it accepts.  Tool calling: A type of chat model API that accepts tool schemas, along with messages, as input and returns invocations of those tools as part of the output message.  Structured output: A technique to make a chat model respond in a structured format, such as JSON that matches a given schema.  Memory: Information about a conversation that is persisted so that it can be used in future conversations.  Multimodality: The ability to work with data that comes in different forms, such as text, audio, images, and video."), Document(id='39919c52-d597-414e-8fca-995babccb10d', metadata={'type': 'pdf', 'page': 1, 'source': './KB/PDF/guest_071520251457/Langchain Conceptual guide.pdf'}, page_content="langchaincore: Core langchain package. Includes base interfaces and in-memory implementations.  langchain: A package for higher level components e.g., some pre-built chains.  langchainlanggraph: Powerful orchestration layer for LangChain. Use to build complex pipelines and workflows.  Managing chat history: Techniques to maintain and manage the chat history.  OpenAI format: OpenAI's message format for chat models.  Propagation of RunnableConfig: Propagating configuration through Runnables.  RemoveMessage: An abstraction used to remove a message from chat history, used primarily in LangGraph.  role: Represents the role e.g., user, assistant of a chat message.  RunnableConfig: Use to pass run time information to Runnables e.g., runName, runId, tags, metadata, maxConcurrency, recursionLimit, configurable.  Standard parameters for chat models: Parameters such as API key, temperature, and maxTokens,  stream: Use to stream output from a Runnable or a graph.  Tokenization: The process of converting data into tokens and vice versa.  Tokens: The basic unit that a language model reads, processes, and generates under the hood.  Tool artifacts: Add artifacts to the output of a tool that will not be sent to the model, but will be available for downstream processing.  Tool binding: Binding tools to models.  tool: Function for creating tools in LangChain.  Toolkits: A collection of tools that can be used together.  ToolMessage: Represents a message that contains the results of a tool execution.  Vector stores: Datastores specialized for storing and efficiently searching vector embeddings.")]
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'How can I load multiple web pages using the web-based loader in Langflow?', 'result': 'As of the latest information available, the functionality to load multiple web pages using the web-based loader in Langflow is not yet available. The team has mentioned that they will implement this feature in the next minor release. Therefore, at the moment, it is not possible to load multiple web pages concurrently using the web-based loader in Langflow.'}
127.0.0.1 - - [15/Jul/2025 15:07:06] "POST /data HTTP/1.1" 200 -
Public URL: https://d36b121b36ea.ngrok-free.app
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [16/Jul/2025 16:19:36] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [16/Jul/2025 16:19:37] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [16/Jul/2025 16:20:20] "POST /transcribe HTTP/1.1" 200 -
ERROR:  authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
ERROR:  You can run multiple simultaneous tunnels from a single agent session by defining the tunnels in your agent configuration file and starting them with the command `ngrok start --all`.
ERROR:  Read more about the agent configuration file: https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config
ERROR:  You can view your current agent sessions in the dashboard:
ERROR:  https://dashboard.ngrok.com/agents
ERROR:  
ERROR:  ERR_NGROK_108
ERROR:  https://ngrok.com/docs/errors/err_ngrok_108
ERROR:  
Xet Storage is enabled for this repo, but the 'hf_xet' package is not installed. Falling back to regular HTTP download. For better performance, install the package with: `pip install huggingface_hub[hf_xet]` or `pip install hf_xet`
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
Public URL: https://d36b121b36ea.ngrok-free.app
127.0.0.1 - - [16/Jul/2025 16:26:23] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [16/Jul/2025 16:26:23] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
127.0.0.1 - - [16/Jul/2025 16:26:33] "[35m[1mPOST /transcribe HTTP/1.1[0m" 500 -
Traceback (most recent call last):
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/uslocumuser/Pulmonology_RAG_App/main.py", line 295, in transcribe
    return jsonify({"text": result['text']})
                            ^^^^^^^^^^^^^^^^
TypeError: tuple indices must be integers or slices, not str
ERROR:  authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
ERROR:  You can run multiple simultaneous tunnels from a single agent session by defining the tunnels in your agent configuration file and starting them with the command `ngrok start --all`.
ERROR:  Read more about the agent configuration file: https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config
ERROR:  You can view your current agent sessions in the dashboard:
ERROR:  https://dashboard.ngrok.com/agents
ERROR:  
ERROR:  ERR_NGROK_108
ERROR:  https://ngrok.com/docs/errors/err_ngrok_108
ERROR:  
  0%|                                               | 0.00/139M [00:00<?, ?iB/s] 10%|███▉                                   | 14.1M/139M [00:00<00:00, 148MiB/s] 22%|████████▋                              | 31.1M/139M [00:00<00:00, 165MiB/s] 34%|█████████████▍                         | 47.6M/139M [00:00<00:00, 167MiB/s] 49%|███████████████████                    | 67.8M/139M [00:00<00:00, 185MiB/s] 63%|████████████████████████▍              | 86.6M/139M [00:00<00:00, 189MiB/s] 76%|██████████████████████████████▌         | 106M/139M [00:00<00:00, 193MiB/s] 90%|███████████████████████████████████▉    | 124M/139M [00:00<00:00, 192MiB/s]100%|████████████████████████████████████████| 139M/139M [00:00<00:00, 184MiB/s]
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/__init__.py:150: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(fp, map_location=device)
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
Public URL: https://d36b121b36ea.ngrok-free.app
127.0.0.1 - - [16/Jul/2025 16:33:27] "GET / HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [16/Jul/2025 16:33:39] "POST /transcribe HTTP/1.1" 200 -
Public URL: https://c1ef6c88cee0.ngrok-free.app
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/__init__.py:150: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(fp, map_location=device)
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
ERROR:  authentication failed: Your account is limited to 1 simultaneous ngrok agent sessions.
ERROR:  You can run multiple simultaneous tunnels from a single agent session by defining the tunnels in your agent configuration file and starting them with the command `ngrok start --all`.
ERROR:  Read more about the agent configuration file: https://ngrok.com/docs/secure-tunnels/ngrok-agent/reference/config
ERROR:  You can view your current agent sessions in the dashboard:
ERROR:  https://dashboard.ngrok.com/agents
ERROR:  
ERROR:  ERR_NGROK_108
ERROR:  https://ngrok.com/docs/errors/err_ngrok_108
ERROR:  
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/__init__.py:150: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(fp, map_location=device)
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
Public URL: https://c1ef6c88cee0.ngrok-free.app
127.0.0.1 - - [17/Jul/2025 18:43:12] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:43:13] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [17/Jul/2025 18:44:20] "POST /transcribe HTTP/1.1" 200 -
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/transcribe.py:126: UserWarning: FP16 is not supported on CPU; using FP32 instead
  warnings.warn("FP16 is not supported on CPU; using FP32 instead")
127.0.0.1 - - [17/Jul/2025 18:44:38] "POST /transcribe HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:48:56] "POST /upload_url HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:49:26] "POST /upload_url HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:50:51] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:50:52] "POST /plain_english HTTP/1.1" 200 -
127.0.0.1 - - [17/Jul/2025 18:51:04] "POST /data HTTP/1.1" 200 -
📂 New session folder created: guest_071720251843
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'Can getting a new lung through a transplant improve lung disease?', 'result': "I don't know."}
[Document(id='d2d0f54a-cd75-4ea7-9037-cbdc9673caf4', metadata={'type': 'url', 'source': 'https://docs.smith.langchain.com/self_hosting/faq'}, page_content='Frequently Asked Questions: | LangSmith I can\'t create API keys or manage users in the UI, what\'s wrong? You have likely deployed LangSmith without setting up SSO. LangSmith requires SSO to manage users and API keys. You can find more information on setting up SSO in the configuration section. How does load balancing/ingress work? You will need to expose the frontend container/service to your applications/users. This will handle routing to all downstream services. You will need to terminate SSL at the ingress level. We recommend using a managed service like AWS ALB, GCP Load Balancer, or Nginx. How can we authenticate to the application? Currently, our self-hosted solution supports SSO with OAuth2.0 and OIDC as an authn solution. Note, we do offer a no-auth solution but highly recommend setting up oauth before moving into production. You can find more information on setting up SSO in the configuration section. Can I use external storage services? You can configure LangSmith to use external versions of all storage services. In a production setting, we strongly recommend using external storage services. Check out the configuration section for more information. Does my application need egress to function properly? Our deployment only needs egress for a few things (most of which can reside within your VPC): Fetching images (If mirroring your images, this may not be needed) Talking to any LLM endpoints Talking to any external storage services you may have configured Fetching OAuth information Subscription Metrics and Operational Metadata (if not running in offline mode) Requires egress to https://beacon.langchain.com See Egress for more information Your VPC can set up rules to limit any other access. Note: We require the X-Organization-Id and X-Tenant-Id headers to be allowed to be passed through to the backend service. These are used to determine which organization and workspace (previously called "tenant") the request is for. Resource requirements for the application? In kubernetes, we recommend a minimum helm configuration which can be found in here. For docker, we recommend a minimum of 16GB of RAM and 4 CPUs. For Postgres, we recommend a minimum of 8GB of RAM and 2 CPUs. For Redis, we recommend 4GB of RAM and 2 CPUs. For Clickhouse, we recommend 32GB of RAM and 8 CPUs.'), Document(id='7c25d1d4-11a2-47e5-b184-0b418d524a03', metadata={'type': 'url', 'source': 'https://github.com/langflow-ai/langflow/issues/649'}, page_content="i want to put multiple web page in webbased loder in langflow Issue #649 langflow-ai/langflow changed the title [-]i want to put multiple web page in webbased lower in langflow[/-] [+]i want to put multiple web page in webbased loder in langflow[/+] on Jul 14, 2023on Jul 14, 2023 ogabrielluiz commented on Jul 14, 2023 on Jul 14, 2023 I just got multiple WebBaseLoaders to connect to a TextSplitter on a dev version. We'll define a good way to implement this but it should be very soon. kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 i have already connected WebBaseLoaders to TextSplitter in langflow mapping need to Load multiple urls concurrently i have checked for one urls it is working fine but i need to implement for 2 or more urls load in WebBaseLoaders kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 how to implement in langflow mapping for 2 or more than page of urls , can you please help me ogabrielluiz commented on Jul 15, 2023 on Jul 15, 2023 That functionality is not available yet. We'll implement it in our next minor release kunal923476 commented on Jul 17, 2023 on Jul 17, 2023 stale commented on Aug 31, 2023 on Aug 31, 2023 This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.")]
Using latest vector DB: ./vector_dbs/guest_071520251457
{'query': 'lung transplants help with end-stage lung disease', 'result': "Yes, lung transplants can be a treatment option for individuals with end-stage lung disease, such as advanced chronic obstructive pulmonary disease (COPD), pulmonary fibrosis, cystic fibrosis, or pulmonary hypertension. This procedure can improve the quality of life and extend the life expectancy of some patients with severe lung conditions. Successful lung transplant outcomes depend on various factors, including the patient's overall health, the severity of the lung disease, and adherence to post-transplant care and medication regimens."}
127.0.0.1 - - [17/Jul/2025 18:51:17] "POST /data HTTP/1.1" 200 -
[Document(id='d2d0f54a-cd75-4ea7-9037-cbdc9673caf4', metadata={'source': 'https://docs.smith.langchain.com/self_hosting/faq', 'type': 'url'}, page_content='Frequently Asked Questions: | LangSmith I can\'t create API keys or manage users in the UI, what\'s wrong? You have likely deployed LangSmith without setting up SSO. LangSmith requires SSO to manage users and API keys. You can find more information on setting up SSO in the configuration section. How does load balancing/ingress work? You will need to expose the frontend container/service to your applications/users. This will handle routing to all downstream services. You will need to terminate SSL at the ingress level. We recommend using a managed service like AWS ALB, GCP Load Balancer, or Nginx. How can we authenticate to the application? Currently, our self-hosted solution supports SSO with OAuth2.0 and OIDC as an authn solution. Note, we do offer a no-auth solution but highly recommend setting up oauth before moving into production. You can find more information on setting up SSO in the configuration section. Can I use external storage services? You can configure LangSmith to use external versions of all storage services. In a production setting, we strongly recommend using external storage services. Check out the configuration section for more information. Does my application need egress to function properly? Our deployment only needs egress for a few things (most of which can reside within your VPC): Fetching images (If mirroring your images, this may not be needed) Talking to any LLM endpoints Talking to any external storage services you may have configured Fetching OAuth information Subscription Metrics and Operational Metadata (if not running in offline mode) Requires egress to https://beacon.langchain.com See Egress for more information Your VPC can set up rules to limit any other access. Note: We require the X-Organization-Id and X-Tenant-Id headers to be allowed to be passed through to the backend service. These are used to determine which organization and workspace (previously called "tenant") the request is for. Resource requirements for the application? In kubernetes, we recommend a minimum helm configuration which can be found in here. For docker, we recommend a minimum of 16GB of RAM and 4 CPUs. For Postgres, we recommend a minimum of 8GB of RAM and 2 CPUs. For Redis, we recommend 4GB of RAM and 2 CPUs. For Clickhouse, we recommend 32GB of RAM and 8 CPUs.'), Document(id='7c25d1d4-11a2-47e5-b184-0b418d524a03', metadata={'type': 'url', 'source': 'https://github.com/langflow-ai/langflow/issues/649'}, page_content="i want to put multiple web page in webbased loder in langflow Issue #649 langflow-ai/langflow changed the title [-]i want to put multiple web page in webbased lower in langflow[/-] [+]i want to put multiple web page in webbased loder in langflow[/+] on Jul 14, 2023on Jul 14, 2023 ogabrielluiz commented on Jul 14, 2023 on Jul 14, 2023 I just got multiple WebBaseLoaders to connect to a TextSplitter on a dev version. We'll define a good way to implement this but it should be very soon. kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 i have already connected WebBaseLoaders to TextSplitter in langflow mapping need to Load multiple urls concurrently i have checked for one urls it is working fine but i need to implement for 2 or more urls load in WebBaseLoaders kunal923476 commented on Jul 14, 2023 on Jul 14, 2023 how to implement in langflow mapping for 2 or more than page of urls , can you please help me ogabrielluiz commented on Jul 15, 2023 on Jul 15, 2023 That functionality is not available yet. We'll implement it in our next minor release kunal923476 commented on Jul 17, 2023 on Jul 17, 2023 stale commented on Aug 31, 2023 on Aug 31, 2023 This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.")]
Lung disease Definition Lung disease is any problem in the lungs that prevents the lungs from working properly. There are three main types of lung disease: Airway diseases -- These diseases affect the tubes (airways) that carry oxygen and other gases into and out of the lungs. They usually cause a narrowing or blockage of the airways. Airway diseases include asthma, chronic obstructive pulmonary disease (COPD), bronchiolitis, and bronchiectasis (which also is the main disorder for persons with cystic fibrosis). People with airway diseases often say they feel as if they're "trying to breathe out through a straw." Lung tissue diseases -- These diseases affect the structure of the lung tissue. Scarring or inflammation of the tissue makes the lungs unable to expand fully (restrictive lung disease). This makes it hard for the lungs to take in oxygen and release carbon dioxide. People with this type of lung disorder often say they feel as if they are "wearing a too-tight sweater or vest." As a result, they can't breathe deeply. Pulmonary fibrosis and sarcoidosis are examples of lung tissue disease. Lung circulation diseases -- These diseases affect the blood vessels in the lungs. They are caused by clotting, scarring, or inflammation of the blood vessels. They affect the ability of the lungs to take up oxygen and release carbon dioxide. These diseases may also affect heart function. An example of a lung circulation disease is pulmonary hypertension. People with these conditions often feel very short of breath when they exert themselves. Many lung diseases involve a combination of these three types. The most common lung diseases include: Asthma Collapse of part or all of the lung (pneumothorax or atelectasis) Swelling and inflammation in the main passages (bronchial tubes) that carry air to the lungs (bronchitis) COPD Lung cancer Lung infection (pneumonia) Abnormal buildup of fluid in the lungs (pulmonary edema) Blocked lung artery (pulmonary embolus) What's the best way to slow down lung damage due to COPD?The correct answer is stop smoking. If you have COPD, the best thing you can do for your lungs is to quit smoking. If you need help quitting, ask your doctor about quit smoking groups, medicines, and other tools that can help you kick the habit. You can avoid flare-ups at home by doing which of the following?The correct answer is all of the above. Cold air, fireplace smoke, and cigarette smoke can all trigger COPD symptoms. Avoiding triggers can help you breathe more easily and have fewer flare-ups. Ask your doctor about other ways to improve your symptoms. Men with COPD are more likely to feel depressed than women.The correct answer is false. Both men and women with COPD are at risk for depression or anxiety, but women are more likely to be depressed or anxious than men. Depression and anxiety can make your flare-ups worse. If you think you may be depressed, see your doctor. Overnight oxygen therapy can help you sleep better.The correct answer is true. About half of people with severe COPD have trouble sleeping. Overnight oxygen therapy may help with sleep problems. See your doctor if you're having trouble sleeping to be tested for low oxygen levels. What can pulmonary rehabilitation do for you?The correct answer is all of the above. Pulmonary rehabilitation can help you manage your COPD better. Talk with your doctor to see if it's an option for you. Pulmonary rehabilitation can teach you a new way to breathe.The correct answer is true. You can learn a new way to breathe called pursed lip breathing. Breathing this way before you begin activities or exercise can help your lungs work better. Ask your health care provider about pursed lip breathing. Walking is the best exercise for people with emphysema.The correct answer is true. In studies, patients who exercised often were able to walk farther and breathe better. Try to walk three or four times a day for 5 to 15 minutes. Flying can make breathing problems worse.The correct answer is true. If you're planning to travel by plane, talk with your doctor first. You may need to arrange for in-flight oxygen or a wheelchair. You also may need to let the airline know if you need to take certain medicines or have breathing machines on the plane. Medicines help people manage COPD, but not cure it.The correct answer is true. There are many different kinds of medicines to treat the symptoms of COPD. But they won't cure it. Medicines help people with COPD breathe better, live more fully, avoid flare-ups, and treat flare-ups when they happen. If you have any questions about your medicines, talk to your doctor. Strengthening exercises are good for people with COPD.The correct answer is true. Strengthening exercises can help build muscles and improve breathing. This type of exercise also may help you with simple activities such as standing up from a chair and climbing stairs. Talk with your doctor about what exercises you can do to build strength. References Clifton IJ, Ellames DAB. Respiratory medicine. In: Penman ID, Ralston SH, Strachan MWJ, Hobson RP, eds. Davidson's Principles and Practice of Medicine. 24th ed. Philadelphia, PA: Elsevier; 2023:chap 17. Kraft M. Approach to the patient with respiratory disease. In: Goldman L, Cooney KA, eds. Goldman-Cecil Medicine. 27th ed. Philadelphia, PA: Elsevier; 2024:chap 71.

127.0.0.1 - - [17/Jul/2025 18:52:34] "POST /create_vector_db HTTP/1.1" 200 -
Public URL: https://5becafdf1641.ngrok-free.app
/home/uslocumuser/Pulmonology_RAG_App/myenv/lib/python3.12/site-packages/whisper/__init__.py:150: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(fp, map_location=device)
 * Serving Flask app 'main'
 * Debug mode: on
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:3000
 * Running on http://10.0.0.4:3000
[33mPress CTRL+C to quit[0m
127.0.0.1 - - [23/Jul/2025 15:36:29] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [23/Jul/2025 15:36:32] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
